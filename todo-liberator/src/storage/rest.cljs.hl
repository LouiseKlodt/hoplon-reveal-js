(ns storage.rest
  (:require-macros [cljs.core.async.macros :refer [go]])  
  (:require
   [tailrecursion.hoplon.storage-atom :refer [store IStorageBackend]]
   [ajax.core :refer [GET POST]]
   [cljs.core.async :refer [chan <! put!]]))

(defn -get-channel
  [url not-found]
  (let [the-chan (chan)]
    (GET url
         {:handler (fn [response]
                     (put! the-chan response))
          :error-handler (fn [_]
                           (put! the-chan not-found))})
    the-chan))

(deftype RestStorageBackend [url atom loaded?]
  IStorageBackend
  (-get [this not-found]
    (GET url
         {:handler (fn [response]
                     (reset! atom response)
                     (reset! loaded? true))})
    @atom)
  (-commit! [this value]
    (POST url :params {:value value})))

(deftype NullStorageBackend []
  IStorageBackend
  (-get [this not-found]
    (.log js/console "-get")
    not-found)
  (-commit! [this value]
    (.log js/console "-commit!")
    (.log js/console (clj->js value))
    value))

(defn rest-storage
  [atom loaded? url]
  (store atom (RestStorageBackend. url atom loaded?)))

(defn null-storage
  [atom]
  (store atom (NullStorageBackend.)))
